function [labelimage, stats] = glance_filter(weightmap, params)
%GLANCE_FILTER simple filter for GLANCE_STD outputs
%   [LABELIMAGE, STATS] = GLANCE_FILTER(WEIGHTMAP, PARAMS) processes WEIGHTMAP generated
%   by GLANCE_STD.
% Inputs:
%   WEIGHTMAP   weight map generated by GLANCE_STD.
%   PARAMS      a struct consisting of:
%               threshold - threshold to binarise WEIGHTMAP (default=0.1)
%               minpix - how many connected pixels are considered a valid area(default=16)
%               convex - whether to use convex hull to calculate the area (default=1)
% Outputs:
%   LABELIMAGE  labelled image derived from weightmap
%   STATS       a struct containing fields from REGIONPROPS including Area, BoundingBox,
%               Centroid, ConvexArea(if convex==1), ConvexImage(if convex==1), 
%               MajorAxisLenght, MinorAxisLngth, Orientation, PixelIdxList
%
%   See also GLANCE_STD.

%   Weihao Sheng, 2020-05-28
%   Yang Yang's Lab of Neural Basis of Learning and Memory
%   School of Life Sciences and Technology, ShanghaiTech University,
%   Shanghai, China

if nargin<2, params = []; end
threshold = get_option(params, 'threshold', 0.05);
minpixels = get_option(params, 'minpix', 16);
useConvex = get_option(params, 'convex', 1);

    % get connex info
    weightmap = weightmap > threshold; 
    mapconn = bwconncomp(weightmap);
    % calculate pixels and eliminate those below minpixels
    nPixels = cellfun(@numel,mapconn.PixelIdxList);
    Idx2Elim = 1:mapconn.NumObjects; Idx2Elim = Idx2Elim(nPixels<minpixels);
    for id = 1:length(Idx2Elim)
        weightmap([mapconn.PixelIdxList{Idx2Elim(id)}]) = 0;
    end
    
    % get refreshed connections
    mapconn = bwconncomp(weightmap);
    % ...and label the image
    labelimage = labelmatrix(mapconn);
    
    if nargout>1
        stats = regionprops(mapconn,    'Area', 'BoundingBox', 'Centroid', ...
                                        'MajorAxisLength', 'MinorAxisLength', ...
                                        'Orientation', 'PixelIdxList');

        if useConvex
            % tricky setting for regionprops that don't support GPU
            if isa(mapconn, 'gpuArray')
                stats_convex = regionprops(gather(mapconn), 'ConvexArea', 'ConvexImage');
            else
                stats_convex = regionprops(mapconn, 'ConvexArea', 'ConvexImage');
            end
            [stats.ConvexArea] = stats_convex.ConvexArea;
            [stats.ConvexImage] = stats_convex.ConvexImage;
        end
    end
end
